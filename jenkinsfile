pipeline {
    agent any
    tools {
        maven 'maven'
        docker 'docker'  // Ensure Docker is available in the environment
    }
    environment {
        BACKUP_DIR = '/path/to/backup/folder'
        ARTIFACT_NAME = 'my-artifact.jar' // Replace with your artifact name
    }
    stages {
        stage('Git Checkout') {
            steps {
                // Checkout the code from the repository (your GitHub repo)
                git 'https://github.com/Syed00011/Java-Springboot.git'
            }
        }

        stage('Compile') {
            steps {
                // Compile your project
                sh 'mvn compile'
            }
        }

        stage('Package') {
            steps {
                // Build the project artifact
                sh 'mvn install'
            }
        }

        stage('Create Versioned Backup') {
            steps {
                script {
                    // Define the backup version based on build number or timestamp
                    def backupVersion = "backup-${BUILD_NUMBER}-${env.BUILD_ID}.jar"
                    
                    // Create a new folder for the versioned backup if it doesn't exist
                    sh "mkdir -p ${BACKUP_DIR}"
                    
                    // Move or copy the artifact to the versioned backup folder
                    sh "cp target/${ARTIFACT_NAME} ${BACKUP_DIR}/${backupVersion}"
                    
                    echo "Artifact backed up as ${BACKUP_DIR}/${backupVersion}"
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Build Docker image
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t java-spring .'
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker run -itd --name ci-cd-container -p 8085:8081 java-spring'
                    }
                }
            }
        }
    }

    post {
        always {
            // Post build actions (no Slack notification now)
            echo "Build finished with status: ${currentBuild.currentResult}"
        }
    }
}
