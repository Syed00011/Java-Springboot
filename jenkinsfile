pipeline {
    agent any
    tools {
        maven 'maven3'  // Ensure Maven is available in the environment
    }
    environment {
        BACKUP_DIR = '/home/ec2-user/backup-jenkins'
        ARTIFACT_NAME = 'demo-0.0.1-SNAPSHOT.jar' // Default artifact name (if needed)
    }
    stages {
        stage('Git Checkout') {
            steps {
                // Checkout the code from the repository (your GitHub repo)
                git 'https://github.com/Syed00011/Java-Springboot.git'
            }
        }

        stage('Compile') {
            steps {
                // Compile your project
                sh 'mvn compile'
            }
        }

        stage('Package') {
            steps {
                // Build the project artifact
                sh 'mvn install'
            }
        }

        stage('Create Versioned Backup') {
            steps {
                script {
                    // Define the backup version based on build number or timestamp
                    def backupVersion = "backup-${BUILD_NUMBER}-${env.BUILD_ID}.jar"
                    
                    // Create a new folder for the versioned backup if it doesn't exist
                    sh "mkdir -p ${BACKUP_DIR}"
                    
                    // Move or copy the artifact to the versioned backup folder
                    sh "cp target/${ARTIFACT_NAME} ${BACKUP_DIR}/${backupVersion}"
                    
                    echo "Artifact backed up as ${BACKUP_DIR}/${backupVersion}"
                }
            }
        }

        stage('Select Latest Backup') {
            steps {
                script {
                    // Find the most recent backup JAR file from the backup directory
                    def latestBackup = sh(script: "ls -t ${BACKUP_DIR}/backup-*.jar | head -n 1", returnStdout: true).trim()
                    echo "Latest backup found: ${latestBackup}"
                    
                    // Copy the latest backup JAR to the Docker build context
                    sh "cp ${latestBackup} demo-0.0.1-SNAPSHOT.jar"
                }
            }
        }

        stage('Clean Up Previous Docker Containers and Images') {
            steps {
                script {
                    // Stop and remove the existing container if it is running
                    sh 'docker ps -q -f name=ci-cd-container | xargs -r docker stop | xargs -r docker rm'

                    // Remove the existing Docker image if it exists
                    sh 'docker images -q java-spring | xargs -r docker rmi'
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t java-spring .'
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container
                    sh 'docker run -itd --name ci-cd-container -p 8085:8081 java-spring'
                }
            }
        }
    }

    post {
        always {
            // Post build actions (no Slack notification now)
            echo "Build finished with status: ${currentBuild.currentResult}"
        }
    }
}
